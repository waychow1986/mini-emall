/*
 * This file is generated by jOOQ.
 */
package com.azure.csu.tiger.order.jooq.tables;


import com.azure.csu.tiger.order.jooq.Keys;
import com.azure.csu.tiger.order.jooq.OrderCenter;
import com.azure.csu.tiger.order.jooq.tables.records.OrderItemRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 订单条目表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderItem extends TableImpl<OrderItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>order_center.order_item</code>
     */
    public static final OrderItem ORDER_ITEM = new OrderItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderItemRecord> getRecordType() {
        return OrderItemRecord.class;
    }

    /**
     * The column <code>order_center.order_item.id</code>.
     */
    public final TableField<OrderItemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>order_center.order_item.order_id</code>. 订单id
     */
    public final TableField<OrderItemRecord, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false), this, "订单id");

    /**
     * The column <code>order_center.order_item.sku_id</code>. 商品id
     */
    public final TableField<OrderItemRecord, Long> SKU_ID = createField(DSL.name("sku_id"), SQLDataType.BIGINT.nullable(false), this, "商品id");

    /**
     * The column <code>order_center.order_item.sku_price</code>. 购买时商品价格
     */
    public final TableField<OrderItemRecord, Long> SKU_PRICE = createField(DSL.name("sku_price"), SQLDataType.BIGINT.nullable(false), this, "购买时商品价格");

    /**
     * The column <code>order_center.order_item.sku_num</code>. 购买数量
     */
    public final TableField<OrderItemRecord, Integer> SKU_NUM = createField(DSL.name("sku_num"), SQLDataType.INTEGER.nullable(false), this, "购买数量");

    /**
     * The column <code>order_center.order_item.split_coupon_amount</code>. 优惠券平摊金额
     */
    public final TableField<OrderItemRecord, Long> SPLIT_COUPON_AMOUNT = createField(DSL.name("split_coupon_amount"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "优惠券平摊金额");

    /**
     * The column <code>order_center.order_item.create_time</code>.
     */
    public final TableField<OrderItemRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>order_center.order_item.modify_time</code>.
     */
    public final TableField<OrderItemRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>order_center.order_item.create_user_id</code>.
     */
    public final TableField<OrderItemRecord, Long> CREATE_USER_ID = createField(DSL.name("create_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>order_center.order_item.modify_user_id</code>.
     */
    public final TableField<OrderItemRecord, Long> MODIFY_USER_ID = createField(DSL.name("modify_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private OrderItem(Name alias, Table<OrderItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderItem(Name alias, Table<OrderItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("订单条目表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>order_center.order_item</code> table reference
     */
    public OrderItem(String alias) {
        this(DSL.name(alias), ORDER_ITEM);
    }

    /**
     * Create an aliased <code>order_center.order_item</code> table reference
     */
    public OrderItem(Name alias) {
        this(alias, ORDER_ITEM);
    }

    /**
     * Create a <code>order_center.order_item</code> table reference
     */
    public OrderItem() {
        this(DSL.name("order_item"), null);
    }

    public <O extends Record> OrderItem(Table<O> child, ForeignKey<O, OrderItemRecord> key) {
        super(child, key, ORDER_ITEM);
    }

    @Override
    public Schema getSchema() {
        return OrderCenter.ORDER_CENTER;
    }

    @Override
    public Identity<OrderItemRecord, Long> getIdentity() {
        return (Identity<OrderItemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderItemRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_ITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrderItemRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderItemRecord>>asList(Keys.KEY_ORDER_ITEM_PRIMARY);
    }

    @Override
    public OrderItem as(String alias) {
        return new OrderItem(DSL.name(alias), this);
    }

    @Override
    public OrderItem as(Name alias) {
        return new OrderItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItem rename(String name) {
        return new OrderItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItem rename(Name name) {
        return new OrderItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, Long, Integer, Long, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
