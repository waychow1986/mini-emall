/*
 * This file is generated by jOOQ.
 */
package com.azure.csu.tiger.product.jooq.tables;


import com.azure.csu.tiger.product.jooq.Keys;
import com.azure.csu.tiger.product.jooq.ProductCenter;
import com.azure.csu.tiger.product.jooq.tables.records.BrandRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 品牌表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Brand extends TableImpl<BrandRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>product_center.brand</code>
     */
    public static final Brand BRAND = new Brand();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrandRecord> getRecordType() {
        return BrandRecord.class;
    }

    /**
     * The column <code>product_center.brand.id</code>.
     */
    public final TableField<BrandRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>product_center.brand.name</code>. 品牌名称
     */
    public final TableField<BrandRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "品牌名称");

    /**
     * The column <code>product_center.brand.logo_url</code>. logo地址
     */
    public final TableField<BrandRecord, String> LOGO_URL = createField(DSL.name("logo_url"), SQLDataType.VARCHAR(255), this, "logo地址");

    /**
     * The column <code>product_center.brand.first_letter</code>. 首字母
     */
    public final TableField<BrandRecord, String> FIRST_LETTER = createField(DSL.name("first_letter"), SQLDataType.VARCHAR(1).nullable(false), this, "首字母");

    /**
     * The column <code>product_center.brand.is_deleted</code>. 是否删除 0-否，1-是
     */
    public final TableField<BrandRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除 0-否，1-是");

    /**
     * The column <code>product_center.brand.create_time</code>.
     */
    public final TableField<BrandRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>product_center.brand.modify_time</code>.
     */
    public final TableField<BrandRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>product_center.brand.create_user_id</code>.
     */
    public final TableField<BrandRecord, Long> CREATE_USER_ID = createField(DSL.name("create_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>product_center.brand.modify_user_id</code>.
     */
    public final TableField<BrandRecord, Long> MODIFY_USER_ID = createField(DSL.name("modify_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Brand(Name alias, Table<BrandRecord> aliased) {
        this(alias, aliased, null);
    }

    private Brand(Name alias, Table<BrandRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("品牌表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>product_center.brand</code> table reference
     */
    public Brand(String alias) {
        this(DSL.name(alias), BRAND);
    }

    /**
     * Create an aliased <code>product_center.brand</code> table reference
     */
    public Brand(Name alias) {
        this(alias, BRAND);
    }

    /**
     * Create a <code>product_center.brand</code> table reference
     */
    public Brand() {
        this(DSL.name("brand"), null);
    }

    public <O extends Record> Brand(Table<O> child, ForeignKey<O, BrandRecord> key) {
        super(child, key, BRAND);
    }

    @Override
    public Schema getSchema() {
        return ProductCenter.PRODUCT_CENTER;
    }

    @Override
    public Identity<BrandRecord, Long> getIdentity() {
        return (Identity<BrandRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BrandRecord> getPrimaryKey() {
        return Keys.KEY_BRAND_PRIMARY;
    }

    @Override
    public List<UniqueKey<BrandRecord>> getKeys() {
        return Arrays.<UniqueKey<BrandRecord>>asList(Keys.KEY_BRAND_PRIMARY);
    }

    @Override
    public Brand as(String alias) {
        return new Brand(DSL.name(alias), this);
    }

    @Override
    public Brand as(Name alias) {
        return new Brand(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Brand rename(String name) {
        return new Brand(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Brand rename(Name name) {
        return new Brand(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, Byte, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
