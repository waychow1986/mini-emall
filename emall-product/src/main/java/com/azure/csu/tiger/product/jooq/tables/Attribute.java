/*
 * This file is generated by jOOQ.
 */
package com.azure.csu.tiger.product.jooq.tables;


import com.azure.csu.tiger.product.jooq.Keys;
import com.azure.csu.tiger.product.jooq.ProductCenter;
import com.azure.csu.tiger.product.jooq.tables.records.AttributeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 属性表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attribute extends TableImpl<AttributeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>product_center.attribute</code>
     */
    public static final Attribute ATTRIBUTE = new Attribute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttributeRecord> getRecordType() {
        return AttributeRecord.class;
    }

    /**
     * The column <code>product_center.attribute.id</code>.
     */
    public final TableField<AttributeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>product_center.attribute.name</code>. 属性名称
     */
    public final TableField<AttributeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "属性名称");

    /**
     * The column <code>product_center.attribute.value_type</code>. 字符串-0、数字-1
     */
    public final TableField<AttributeRecord, Byte> VALUE_TYPE = createField(DSL.name("value_type"), SQLDataType.TINYINT.nullable(false), this, "字符串-0、数字-1");

    /**
     * The column <code>product_center.attribute.fill_type</code>. 单选-0, 多选-0, 输入框-1
     */
    public final TableField<AttributeRecord, Byte> FILL_TYPE = createField(DSL.name("fill_type"), SQLDataType.TINYINT.nullable(false), this, "单选-0, 多选-0, 输入框-1");

    /**
     * The column <code>product_center.attribute.attr_type</code>. 基础属性-0, 销售属性-1
     */
    public final TableField<AttributeRecord, Byte> ATTR_TYPE = createField(DSL.name("attr_type"), SQLDataType.TINYINT.nullable(false), this, "基础属性-0, 销售属性-1");

    /**
     * The column <code>product_center.attribute.unit</code>. 数字类型属性的单位，非数字类型可为空
     */
    public final TableField<AttributeRecord, String> UNIT = createField(DSL.name("unit"), SQLDataType.VARCHAR(255), this, "数字类型属性的单位，非数字类型可为空");

    /**
     * The column <code>product_center.attribute.is_search</code>. 是否用于搜索筛选 0-否，1-是
     */
    public final TableField<AttributeRecord, Byte> IS_SEARCH = createField(DSL.name("is_search"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否用于搜索筛选 0-否，1-是");

    /**
     * The column <code>product_center.attribute.search_enums</code>. 非枚举属性，列出筛选区间段
     */
    public final TableField<AttributeRecord, String> SEARCH_ENUMS = createField(DSL.name("search_enums"), SQLDataType.VARCHAR(255), this, "非枚举属性，列出筛选区间段");

    /**
     * The column <code>product_center.attribute.is_deleted</code>. 是否删除 0-否，1-是
     */
    public final TableField<AttributeRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除 0-否，1-是");

    /**
     * The column <code>product_center.attribute.create_time</code>.
     */
    public final TableField<AttributeRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>product_center.attribute.modify_time</code>.
     */
    public final TableField<AttributeRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>product_center.attribute.create_user_id</code>.
     */
    public final TableField<AttributeRecord, Long> CREATE_USER_ID = createField(DSL.name("create_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>product_center.attribute.modify_user_id</code>.
     */
    public final TableField<AttributeRecord, Long> MODIFY_USER_ID = createField(DSL.name("modify_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Attribute(Name alias, Table<AttributeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attribute(Name alias, Table<AttributeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("属性表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>product_center.attribute</code> table reference
     */
    public Attribute(String alias) {
        this(DSL.name(alias), ATTRIBUTE);
    }

    /**
     * Create an aliased <code>product_center.attribute</code> table reference
     */
    public Attribute(Name alias) {
        this(alias, ATTRIBUTE);
    }

    /**
     * Create a <code>product_center.attribute</code> table reference
     */
    public Attribute() {
        this(DSL.name("attribute"), null);
    }

    public <O extends Record> Attribute(Table<O> child, ForeignKey<O, AttributeRecord> key) {
        super(child, key, ATTRIBUTE);
    }

    @Override
    public Schema getSchema() {
        return ProductCenter.PRODUCT_CENTER;
    }

    @Override
    public Identity<AttributeRecord, Long> getIdentity() {
        return (Identity<AttributeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AttributeRecord> getPrimaryKey() {
        return Keys.KEY_ATTRIBUTE_PRIMARY;
    }

    @Override
    public List<UniqueKey<AttributeRecord>> getKeys() {
        return Arrays.<UniqueKey<AttributeRecord>>asList(Keys.KEY_ATTRIBUTE_PRIMARY);
    }

    @Override
    public Attribute as(String alias) {
        return new Attribute(DSL.name(alias), this);
    }

    @Override
    public Attribute as(Name alias) {
        return new Attribute(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attribute rename(String name) {
        return new Attribute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attribute rename(Name name) {
        return new Attribute(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, Byte, Byte, Byte, String, Byte, String, Byte, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
