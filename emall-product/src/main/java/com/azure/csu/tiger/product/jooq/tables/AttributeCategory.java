/*
 * This file is generated by jOOQ.
 */
package com.azure.csu.tiger.product.jooq.tables;


import com.azure.csu.tiger.product.jooq.Keys;
import com.azure.csu.tiger.product.jooq.ProductCenter;
import com.azure.csu.tiger.product.jooq.tables.records.AttributeCategoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 类目属性关联表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AttributeCategory extends TableImpl<AttributeCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>product_center.attribute_category</code>
     */
    public static final AttributeCategory ATTRIBUTE_CATEGORY = new AttributeCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttributeCategoryRecord> getRecordType() {
        return AttributeCategoryRecord.class;
    }

    /**
     * The column <code>product_center.attribute_category.id</code>.
     */
    public final TableField<AttributeCategoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>product_center.attribute_category.category_id</code>. 类目id
     */
    public final TableField<AttributeCategoryRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "类目id");

    /**
     * The column <code>product_center.attribute_category.attribute_id</code>. 属性id
     */
    public final TableField<AttributeCategoryRecord, Long> ATTRIBUTE_ID = createField(DSL.name("attribute_id"), SQLDataType.BIGINT.nullable(false), this, "属性id");

    /**
     * The column <code>product_center.attribute_category.is_required</code>. 是否必填 0-否，1-是
     */
    public final TableField<AttributeCategoryRecord, Byte> IS_REQUIRED = createField(DSL.name("is_required"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否必填 0-否，1-是");

    /**
     * The column <code>product_center.attribute_category.create_time</code>.
     */
    public final TableField<AttributeCategoryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>product_center.attribute_category.modify_time</code>.
     */
    public final TableField<AttributeCategoryRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>product_center.attribute_category.create_user_id</code>.
     */
    public final TableField<AttributeCategoryRecord, Long> CREATE_USER_ID = createField(DSL.name("create_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>product_center.attribute_category.modify_user_id</code>.
     */
    public final TableField<AttributeCategoryRecord, Long> MODIFY_USER_ID = createField(DSL.name("modify_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private AttributeCategory(Name alias, Table<AttributeCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AttributeCategory(Name alias, Table<AttributeCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("类目属性关联表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>product_center.attribute_category</code> table reference
     */
    public AttributeCategory(String alias) {
        this(DSL.name(alias), ATTRIBUTE_CATEGORY);
    }

    /**
     * Create an aliased <code>product_center.attribute_category</code> table reference
     */
    public AttributeCategory(Name alias) {
        this(alias, ATTRIBUTE_CATEGORY);
    }

    /**
     * Create a <code>product_center.attribute_category</code> table reference
     */
    public AttributeCategory() {
        this(DSL.name("attribute_category"), null);
    }

    public <O extends Record> AttributeCategory(Table<O> child, ForeignKey<O, AttributeCategoryRecord> key) {
        super(child, key, ATTRIBUTE_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return ProductCenter.PRODUCT_CENTER;
    }

    @Override
    public Identity<AttributeCategoryRecord, Long> getIdentity() {
        return (Identity<AttributeCategoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AttributeCategoryRecord> getPrimaryKey() {
        return Keys.KEY_ATTRIBUTE_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<AttributeCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<AttributeCategoryRecord>>asList(Keys.KEY_ATTRIBUTE_CATEGORY_PRIMARY);
    }

    @Override
    public AttributeCategory as(String alias) {
        return new AttributeCategory(DSL.name(alias), this);
    }

    @Override
    public AttributeCategory as(Name alias) {
        return new AttributeCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AttributeCategory rename(String name) {
        return new AttributeCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AttributeCategory rename(Name name) {
        return new AttributeCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, Byte, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
