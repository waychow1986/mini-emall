/*
 * This file is generated by jOOQ.
 */
package com.azure.csu.tiger.user.jooq.tables;


import com.azure.csu.tiger.user.jooq.Keys;
import com.azure.csu.tiger.user.jooq.UserCenter;
import com.azure.csu.tiger.user.jooq.tables.records.UserAddressRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 用户地址表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAddress extends TableImpl<UserAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_center.user_address</code>
     */
    public static final UserAddress USER_ADDRESS = new UserAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAddressRecord> getRecordType() {
        return UserAddressRecord.class;
    }

    /**
     * The column <code>user_center.user_address.id</code>.
     */
    public final TableField<UserAddressRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>user_center.user_address.user_id</code>. 用户id
     */
    public final TableField<UserAddressRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "用户id");

    /**
     * The column <code>user_center.user_address.name</code>. 联系人姓名
     */
    public final TableField<UserAddressRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "联系人姓名");

    /**
     * The column <code>user_center.user_address.phone_number</code>. 联系人手机号
     */
    public final TableField<UserAddressRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(20).nullable(false), this, "联系人手机号");

    /**
     * The column <code>user_center.user_address.province</code>. 省
     */
    public final TableField<UserAddressRecord, String> PROVINCE = createField(DSL.name("province"), SQLDataType.VARCHAR(255).nullable(false), this, "省");

    /**
     * The column <code>user_center.user_address.city</code>. 市
     */
    public final TableField<UserAddressRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(255).nullable(false), this, "市");

    /**
     * The column <code>user_center.user_address.region</code>. 区
     */
    public final TableField<UserAddressRecord, String> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(255).nullable(false), this, "区");

    /**
     * The column <code>user_center.user_address.detail_address</code>. 详细地址
     */
    public final TableField<UserAddressRecord, String> DETAIL_ADDRESS = createField(DSL.name("detail_address"), SQLDataType.VARCHAR(255).nullable(false), this, "详细地址");

    /**
     * The column <code>user_center.user_address.is_default</code>. 是否默认地址 0-否，1-是
     */
    public final TableField<UserAddressRecord, Byte> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否默认地址 0-否，1-是");

    /**
     * The column <code>user_center.user_address.create_time</code>.
     */
    public final TableField<UserAddressRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>user_center.user_address.modify_time</code>.
     */
    public final TableField<UserAddressRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>user_center.user_address.create_user_id</code>.
     */
    public final TableField<UserAddressRecord, Long> CREATE_USER_ID = createField(DSL.name("create_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>user_center.user_address.modify_user_id</code>.
     */
    public final TableField<UserAddressRecord, Long> MODIFY_USER_ID = createField(DSL.name("modify_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private UserAddress(Name alias, Table<UserAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAddress(Name alias, Table<UserAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户地址表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>user_center.user_address</code> table reference
     */
    public UserAddress(String alias) {
        this(DSL.name(alias), USER_ADDRESS);
    }

    /**
     * Create an aliased <code>user_center.user_address</code> table reference
     */
    public UserAddress(Name alias) {
        this(alias, USER_ADDRESS);
    }

    /**
     * Create a <code>user_center.user_address</code> table reference
     */
    public UserAddress() {
        this(DSL.name("user_address"), null);
    }

    public <O extends Record> UserAddress(Table<O> child, ForeignKey<O, UserAddressRecord> key) {
        super(child, key, USER_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return UserCenter.USER_CENTER;
    }

    @Override
    public Identity<UserAddressRecord, Long> getIdentity() {
        return (Identity<UserAddressRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserAddressRecord> getPrimaryKey() {
        return Keys.KEY_USER_ADDRESS_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserAddressRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAddressRecord>>asList(Keys.KEY_USER_ADDRESS_PRIMARY);
    }

    @Override
    public UserAddress as(String alias) {
        return new UserAddress(DSL.name(alias), this);
    }

    @Override
    public UserAddress as(Name alias) {
        return new UserAddress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAddress rename(String name) {
        return new UserAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAddress rename(Name name) {
        return new UserAddress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, String, String, String, String, String, String, Byte, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
